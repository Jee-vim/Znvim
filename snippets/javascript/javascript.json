{
  "require": {
    "prefix": "req",
    "body": "require('${1:module}')"
  },
  "const module = require('module')": {
    "prefix": "req module",
    "body": "const ${1:module} = require('${1:module}')"
  },
  "dom event default": {
    "prefix": "event",
    "body": "e.preventDefault()"
  },
  "addEventListener": {
    "prefix": "add event listener",
    "body": "document.addEventListener('${1:event}', ${2:ev} => {\n\t${0}\n})"
  },
  "removeEventListener": {
    "prefix": "remove event listener",
    "body": "document.removeEventListener('${1:event}', ${22:listener})"
  },
  "getElementById": {
    "prefix": "get element by class",
    "body": "document.getElementById('${1:id}')"
  },
  "querySelector": {
    "prefix": "query selector",
    "body": "document.querySelector('${1:selector}')"
  },
  "querySelectorAll": {
    "prefix": "array from",
    "body": "Array.from(${1:document}.querySelectorAll('${2:selector}'))"
  },
  "createElement": {
    "prefix": "create element",
    "body": "${1:document}.createElement(${2:elem})"
  },
  "classList.add": {
    "prefix": "class add",
    "body": "${1:el}.classList.add('${2:class}')"
  },
  "classList.remove": {
    "prefix": "class remove",
    "body": "${1:el}.classList.remove('${2:class}')"
  },
  "classList.toggle": {
    "prefix": "class toggle",
    "body": "${1:el}.classList.toggle('${2:class}')"
  },
  "getAttribute": {
    "prefix": "attribute get",
    "body": "${1:el}.getAttribute('${2:attr}')"
  },
  "removeAttribute": {
    "prefix": "attribute remove",
    "body": "${1:el}.removeAttribute('${2:attr}')"
  },
  "setAttribute": {
    "prefix": "attribute set",
    "body": "${1:el}.setAttribute('${2:attr}', ${3:value})"
  },
  "appendChild": {
    "prefix": "append child",
    "body": "${1:el}.appendChild(${2:elem})"
  },
  "removeChild": {
    "prefix": "remove child",
    "body": "${1:el}.removeChild(${2:elem})"
  },
  "forEach loop": {
    "prefix": "foreEch",
    "body": "${1:iterable}.forEach((${2:item}) => {\n\t${0}\n})"
  },
  "map": {
    "prefix": "map",
    "body": "${1:iterable}.map((${2:item}) => {\n\t${0}\n})"
  },
  "reduce": {
    "prefix": "reduce",
    "body": "${1:iterable}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial})"
  },
  "filter": {
    "prefix": "filter",
    "body": "${1:iterable}.filter((${2:item}) => {\n\t${0}\n})"
  },
  "find": {
    "prefix": "find",
    "body": "${1:iterable}.find((${2:item}) => {\n\t${0}\n})"
  },
  "every": {
    "prefix": "every",
    "body": "${1:iterable}.every((${2:item}) => {\n\t${0}\n})"
  },
  "some": {
    "prefix": "some",
    "body": "${1:iterable}.some((${2:item}) => {\n\t${0}\n})"
  },
  "var statement": {
    "prefix": "v",
    "body": "var ${1:name}"
  },
  "var assignment": {
    "prefix": "va",
    "body": "var ${1:name} = ${2:value}"
  },
  "let statement": {
    "prefix": "l",
    "body": "let ${1:name}"
  },
  "const statement": {
    "prefix": "const",
    "body": "const ${1:name}"
  },
  "const statement from destructuring": {
    "prefix": "dest",
    "body": "const { ${2:prop} } = ${1:value}"
  },
  "const statement from array destructuring": {
    "prefix": "destArray",
    "body": "const [ ${2:prop} ] = ${1:value}"
  },
  "const assignment awaited": {
    "prefix": "constAwait",
    "body": "const ${1:name} = await ${2:value}"
  },
  "const arrow function assignment": {
    "prefix": "arrowFunc",
    "body": "const ${1:name} = (${2:arguments}) => {\n\treturn ${0}\n}"
  },
  "const assignment yielded": {
    "prefix": "constYield",
    "body": "const ${1:name} = yield ${2:value}"
  },
  "const object": {
    "prefix": "constObject",
    "body": "const ${1:name} = {\n\t${0}\n}"
  },
  "const array": {
    "prefix": "constArray",
    "body": "const ${1:name} = [\n\t${0}\n]"
  },
  "module export": {
    "prefix": "e",
    "body": "export ${1:member}"
  },
  "module default export": {
    "prefix": "export default",
    "body": "export default ${1:member}"
  },
  "import module destructured": {
    "prefix": "importDest",
    "body": "import {$2} from '${1:module}'"
  },
  "this": {
    "prefix": "t",
    "body": "this."
  },
  "else statement": {
    "prefix": "else",
    "body": "else {\n\t${0}\n}"
  },
  "else if statement": {
    "prefix": "elif",
    "body": "else if (${1:condition}) {\n\t${0}\n}"
  },
  "throw new Error": {
    "prefix": "throw",
    "body": "throw new ${0:error}"
  },
  "try/catch": {
    "prefix": "try",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}"
  },
  "try/finally": {
    "prefix": "tryFinally",
    "body": "try {\n\t${0}\n} finally {\n\t\n}"
  },
  "try/catch/finally": {
    "prefix": "tcf",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}"
  },
  "anonymous function": {
    "prefix": "anonymous",
    "body": "function (${1:arguments}) {${0}}"
  },
  "named function": {
    "prefix": "function",
    "body": "function ${1:name} (${2:arguments}) {\n\t${0}\n}"
  },
  "async function": {
    "prefix": "async",
    "body": "async function (${1:arguments}) {\n\t${0}\n}"
  },
  "console.log": {
    "prefix": "console",
    "body": "console.log(${0})"
  },
  "console.log with JSON.stringify": {
    "prefix": "console json",
    "body": "console.log(JSON.stringify(${0}))"
  },
  "console.debug": {
    "prefix": "console debug",
    "body": "console.debug(${0})"
  },
  "console.debug with JSON.stringify": {
    "prefix": "console debug json",
    "body": "console.debug(JSON.stringify(${0}))"
  },
  "console.log a variable": {
    "prefix": "console variable",
    "body": "console.log('${0}:', ${0})"
  },
  "console.error": {
    "prefix": "console err",
    "body": "console.error(${0})"
  },
  "JSON.stringify()": {
    "prefix": "json stringify",
    "body": "JSON.stringify($0)"
  },
  "JSON.parse()": {
    "prefix": "json parse",
    "body": "JSON.parse($0)"
  },
  "ternary": {
    "prefix": "ternary",
    "body": "${1:cond} ? ${2:true} : ${3:false}"
  },
  "return": {
    "prefix": "r",
    "body": "return ${0}"
  },
  "return this": {
    "prefix": "rt",
    "body": "return ${0:this}"
  },
  "return null": {
    "prefix": "rn",
    "body": "return null"
  },
  "return new object": {
    "prefix": "ro",
    "body": "return {\n\t${0}\n}"
  },
  "return new array": {
    "prefix": "ra",
    "body": "return [\n\t${0}\n]"
  },
  "return promise": {
    "prefix": "rp",
    "body": "return new Promise((resolve, reject) => {\n\t${0}\n})"
  },
  "define module": {
    "prefix": "define",
    "body": [
      "define([",
      "\t'require',",
      "\t'${1:dependency}'",
      "], function(require, ${2:factory}) {",
      "\t'use strict';",
      "\t$0",
      "});"
    ],
    "description": "define module"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
      "\tconst ${3:element} = ${2:array}[${1:index}];",
      "\t$0",
      "}"
    ],
    "description": "For Loop"
  },
  "For-Each Loop": {
    "prefix": "foreach",
    "body": ["${1:array}.forEach(${2:element} => {", "\t$0", "});"],
    "description": "For-Each Loop"
  },
  "For-In Loop": {
    "prefix": "forin",
    "body": [
      "for (const ${1:key} in ${2:object}) {",
      "\tif (${2:object}.hasOwnProperty(${1:key})) {",
      "\t\tconst ${3:element} = ${2:object}[${1:key}];",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "For-In Loop"
  },
  "For-Of Loop": {
    "prefix": "forof",
    "body": ["for (const ${1:iterator} of ${2:object}) {", "\t$0", "}"],
    "description": "For-Of Loop"
  },
  "Function Statement": {
    "prefix": "function",
    "body": ["function ${1:name}(${2:params}) {", "\t$0", "}"],
    "description": "Function Statement"
  },
  "If Statement": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "\t$0", "}"],
    "description": "If Statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": ["if (${1:condition}) {", "\t$0", "} else {", "\t", "}"],
    "description": "If-Else Statement"
  },
  "New Statement": {
    "prefix": "new",
    "body": ["const ${1:name} = new ${2:type}(${3:arguments});$0"],
    "description": "New Statement"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "While Statement": {
    "prefix": "while",
    "body": ["while (${1:condition}) {", "\t$0", "}"],
    "description": "While Statement"
  },
  "Set Timeout Function": {
    "prefix": "settimeout",
    "body": ["setTimeout(() => {", "\t$0", "}, ${1:timeout});"],
    "description": "Set Timeout Function"
  },
  "Set Interval Function": {
    "prefix": "setinterval",
    "body": ["setInterval(() => {", "\t$0", "}, ${1:interval});"],
    "description": "Set Interval Function"
  }
}
