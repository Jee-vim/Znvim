{
  "import env": {
    "prefix": "import env",
    "body": "import.meta.env"
  },
  "import": {
    "prefix": "import",
    "body": "import ${1:val} from '${2:val}'"
  },
  "import statement": {
    "prefix": "import statement",
    "body": "import { ${1:val} } from '${2:val}'"
  },
  "const": {
    "prefix": "const",
    "body": "const ${1:val} = ${2:val}"
  },
  "let": {
    "prefix": "let",
    "body": "let ${1:val} = ${2:val}"
  },
  "if false return null": {
    "prefix": "ifr",
    "body": "if (!${1:condition}) {\n\treturn null\n}"
  },
  "reactFunctionComponentWithEmotion": {
    "prefix": "rfc",
    "body": "import React from 'react'\n\nexport default function ${TM_FILENAME_BASE}(){\n\treturn (\n\t\t<section>\n\t\t\t$0\n\t\t</section>\n\t)\n}",
    "description": "Creates a React functional component with emotion"
  },
  "reactFunctionComponent": {
    "prefix": "rfce",
    "body": "\nconst ${TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${TM_FILENAME_BASE}",
    "description": "Creates a React function component without PropTypes"
  },
  "arrow function": {
    "prefix": "arrow",
    "body": ["const ${1:} = () => {", "\t${2:}", "}"]
  },
  "jsx element": {
    "prefix": "j",
    "body": "<${1:elementName}>\n\t$0\n</${1}>",
    "description": "an element"
  },
  "jsx element self closed": {
    "prefix": "jc",
    "body": "<${1:elementName} />",
    "description": "an element self closed"
  },
  "jsx elements map": {
    "prefix": "jm",
    "body": "{${1:array}.map((item, id) => <div key={id}>\n\t$0\n</div>)}",
    "description": "an element self closed"
  },
  "jsx elements map with return": {
    "prefix": "jmr",
    "body": "{${1:array}.map((item, id) => {\n\treturn <div key={id}>\n\t$0\n</div>\n})}",
    "description": "an element self closed"
  },
  "useState": {
    "prefix": "us",
    "body": "const [${1:setterName}, set${1}] = useState(${2:''})$0",
    "description": "use state hook"
  },
  "useEffect": {
    "prefix": "ue",
    "body": ["useEffect(() => {", "\t$1", "}, [${3:dependencies}])$0"],
    "description": "React useEffect() hook"
  },
  "useEffect with return": {
    "prefix": "uer",
    "body": [
      "useEffect(() => {",
      "\t$1",
      "\n\treturn () => {",
      "\t\t$2",
      "\t}",
      "}, [${3:dependencies}])$0"
    ],
    "description": "React useEffect() hook with return statement"
  },
  "useContext": {
    "prefix": "uc",
    "body": ["const $1 = useContext($2)$0"],
    "description": "React useContext() hook"
  },
  "useRef": {
    "prefix": "ur",
    "body": ["const ${1:elName}El = useRef(null)$0"],
    "description": "React useContext() hook"
  },
  "useCallback": {
    "prefix": "ucb",
    "body": [
      "const ${1:memoizedCallback} = useCallback(",
      "\t() => {",
      "\t\t${2:doSomething}(${3:a}, ${4:b})",
      "\t},",
      "\t[${5:a}, ${6:b}],",
      ")$0"
    ],
    "description": "React useCallback() hook"
  },
  "useMemo": {
    "prefix": "ume",
    "body": [
      "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0"
    ],
    "description": "React useMemo() hook"
  },
  "useQuery": {
    "prefix": "uq",
    "body": [
      "const { isLoading, isError, error, data } = useQuery({ queryKey: ['${1:key}'], queryFn: ${2:func} })",
      "",
      "if (isLoading) return 'Loading ...'",
      "if (isError) return <p>{error.message}</p>"
    ],
    "description": "useQuery"
  },
  "destructur object": {
    "prefix": "dest",
    "body": "const { ${1:var} } = ${2:func}(${3:val})$0",
    "description": "Destruture an object from array"
  },
  "onClick": {
    "prefix": "onclick",
    "body": "onClick={handle${1:}}",
    "description": "handle onClick events"
  },
  "onChange": {
    "prefix": "onchange",
    "body": "onChange={e => set${1:func}(e.target.value)}",
    "description": "handle onChange events"
  },
  "onSubmit": {
    "prefix": "onsubmit",
    "body": "onSubmit={handle${1:}}",
    "description": "handle onSubmit events"
  },
  "className": {
    "prefix": "class",
    "body": "className='${1:}'",
    "description": "class on jsx"
  },
  "handle events tag element": {
    "prefix": "handle",
    "body": ["const handle${1:func} = () => {", "\t$2", "}"],
    "description": "handle events"
  },
  "export variable": {
    "prefix": "export variable",
    "body": "export const ${1:val} = ${2:val}"
  },
  "export": {
    "prefix": "export",
    "body": "export ${1:var}"
  },
  "toggle menu navbar": {
    "prefix": "menu",
    "body": [
      "const [ menu, setMenu ] = useState(false)",
      "const handleMenu = () => setMenu(!menu)"
    ]
  }
}
