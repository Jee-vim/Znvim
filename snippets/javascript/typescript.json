{
  "Public Method Definition": {
    "prefix": "public method",
    "body": ["/**", " * ${1:name}", " */", "public ${1:name}() {", "\t$0", "}"],
    "description": "Public Method Definition"
  },
  "Private Method Definition": {
    "prefix": "private method",
    "body": ["private ${1:name}() {", "\t$0", "}"],
    "description": "Private Method Definition"
  },
  "Property getter": {
    "prefix": "get",
    "body": [
      "",
      "public get ${1:value}() : ${2:string} {",
      "\t${3:return $0}",
      "}",
      ""
    ],
    "description": "Property getter"
  },
  "Define a full property": {
    "prefix": "prop",
    "body": [
      "",
      "private _${1:value} : ${2:string};",
      "public get ${1:value}() : ${2:string} {",
      "\treturn this._${1:value};",
      "}",
      "public set ${1:value}(v : ${2:string}) {",
      "\tthis._${1:value} = v;",
      "}",
      ""
    ],
    "description": "Define a full property"
  },
  "Triple-slash reference": {
    "prefix": "ref",
    "body": ["/// <reference path=\"$1\" />", "$0"],
    "description": "Triple-slash reference"
  },
  "Property setter": {
    "prefix": "set",
    "body": [
      "",
      "public set ${1:value}(v : ${2:string}) {",
      "\tthis.$3 = v;",
      "}",
      ""
    ],
    "description": "Property setter"
  },
  "Function Statement": {
    "prefix": "function",
    "body": ["function ${1:name}(${2:params}:${3:type}) {", "\t$0", "}"],
    "description": "Function Statement"
  },
  "Region Start": {
    "prefix": "#region",
    "body": ["//#region $0"],
    "description": "Folding Region Start"
  },
  "Region End": {
    "prefix": "#endregion",
    "body": ["//#endregion"],
    "description": "Folding Region End"
  },
  "type": {
    "prefix": "type-types",
    "body": "type T${1} = {\n\t${2}: ${3}\n}"
  },
  "interface": {
    "prefix": "interface-types",
    "body": "interface I${1} {\n\t${2}: ${3}\n}"
  },
  "interface extends": {
    "prefix": "interface-extends-types",
    "body": "interface I$1 extends I$2 {\n\t$3: $4\n}"
  },
  "declare interface": {
    "prefix": "declare-interface",
    "body": "declare interface I${1} {\n\t${2}: ${3}\n}"
  },
  "declare interface extends": {
    "prefix": "declare-interface-extends",
    "body": "declare interface I${1} extends I${2:} {${3} }"
  },
  "props-types": {
    "prefix": "props-types",
    "body": "{\t$1\t}:{$1:${2:types}}"
  },
  "event Change": {
    "prefix": "event-change",
    "body": "React.ChangeEvent<HTMLInputElement>"
  },
  "event Form": {
    "prefix": "event-form",
    "body": "React.FormEvent<HTMLFormElement>"
  },
  "handle events ": {
    "prefix": "handle-func",
    "body": ["const handle${1:func} = () => {", "\t$2", "}"],
    "description": "handle events"
  },
  "handle change": {
    "prefix": "handle-change",
    "body": "const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n\tconst { name, value } = event.target\n\tsetForm({ ...form, [name]: value })\n}"
  },
  "handle submit": {
    "prefix": "handle-submit",
    "body": "const handleSubmit= (event: React.FormEvent<HTMLFormElement>) => {\n\t event.preventDefault()\n\t $0\n}"
  },
  "set state ": {
    "prefix": "set-state",
    "body": "React.Dispatch<React.SetStateAction<$1>>;"
  },
  "set state boolean": {
    "prefix": "set-state-boolean",
    "body": "React.Dispatch<React.SetStateAction<boolean>>"
  },
  "set state array": {
    "prefix": "set-state-array",
    "body": "React.Dispatch<React.SetStateAction<string[]>>;"
  },
  "custom hook": {
    "prefix": "hook",
    "body": "export const use${1:HookName} = () => {\n\t${2}\n}"
  },
  "create obj": {
    "prefix": "obj",
    "body": "const obj = {\n\t${1}\n}"
  },
  "console.log": {
    "prefix": "clo",
    "body": "console.log(${0})"
  },
  "console.log with string": {
    "prefix": "clo-string",
    "body": "console.log(${0}, '${0}')"
  },
  "console.log with JSON.stringify": {
    "prefix": "clo-json",
    "body": "console.log(JSON.stringify(${0}))"
  },
  "console.debug": {
    "prefix": "clo-debug",
    "body": "console.debug(${0})"
  },
  "console.debug with JSON.stringify": {
    "prefix": "clod-jsonStringify",
    "body": "console.debug(JSON.stringify(${0}))"
  },
  "console.log a variable": {
    "prefix": "clo-var",
    "body": "console.log(\"${0}:\", ${0})"
  },
  "console.error": {
    "prefix": "clo-err",
    "body": "console.error(${0})"
  }
}
