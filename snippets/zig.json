{
  "import": {
    "prefix": "impt-",
    "body": "const $1 = @import(\"$2\");",
    "description": "import library"
  },
  "import std": {
    "prefix": "impt-std",
    "body": "const std = @import(\"std\");",
    "description": "import standard library"
  },
  "const": {
    "prefix": "cnt-",
    "body": "const ${1:name} = ${2:value};",
    "description": "const declaration"
  },
  "var": {
    "prefix": "var-",
    "body": "var ${1:name}: ${2:type} = ${3:value};",
    "description": "mutable variable declaration"
  },
  "main function": {
    "prefix": "init",
    "body": "const std = @import(\"std\");\n\npub fn main() !void {\n\t$1\n}",
    "description": "const declaration"
  },
  "stdin": {
    "prefix": "std-in",
    "body": "const stdin = std.io.getStdIn().reader();\nvar buffer: [100]u8 = undefined;\n\nstd.debug.print(\"input : \", .{});\nconst input = try stdin.readUntilDelimiterOrEof(&buffer, '\\n');\n",
    "description": "std input"
  },
  "type string": {
    "prefix": "str-",
    "body": "[]const u8",
    "description": "generate string type"
  },
  "page allocator": {
    "prefix": "alloc-page",
    "body": "const allocator = std.heap.page_allocator;\n\nconst ${1:buf} = try allocator.alloc(u8, ${2:1024});\ndefer allocator.free(${1:buf});\n",
    "description": "Allocate memory using the built-in page allocator"
  },
  "general purpose allocator": {
      "prefix": "alloc-gpa",
      "body": "var gpa = std.heap.GeneralPurposeAllocator(.{}){};\nconst allocator = &gpa.allocator;\n\nconst ${1:buf} = try allocator.alloc(u8, ${2:1024});\ndefer allocator.free(${1:buf});\n",
      "description": "Allocate memory using a general-purpose allocator"
  },
  "arena allocator": {
      "prefix": "alloc-arena",
      "body": "var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);\nconst allocator = &arena.allocator;\n\nconst ${1:buf1} = try allocator.alloc(u8, ${2:256});\nconst ${3:buf2} = try allocator.alloc(u8, ${4:512});\n// Reset arena to free all allocations at once\narena.reset();\n",
      "description": "Allocate memory using an arena allocator"
  },
  "read file with page allocator": {
    "prefix": "alloc-read-file",
    "body": [
      "const allocator = std.heap.page_allocator;",
      "",
      "const file = try std.fs.cwd().openFile(\"${1:file.zig}\", .{});",
      "defer file.close();",
      "const stat = try file.stat();",
      "const file_size = stat.size;",
      "",
      "const buf = try allocator.alloc(u8, file_size);",
      "defer allocator.free(buf);",
      "",
      "_ = try file.readAll(buf);",
      "std.debug.print(\"$1:\\\\n{s}\\\\n\", .{buf});"
    ],
    "description": "Read file into buffer using page allocator"
  }
} 
