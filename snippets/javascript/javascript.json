{
  "require": {
    "prefix": "req",
    "body": "require(\"${1:module}\")"
  },
  "const module = require(\"module\")": {
    "prefix": "req-module",
    "body": "const ${1:module} = require(\"${1:module}\")"
  },
  "dom event default": {
    "prefix": "event",
    "body": "e.preventDefault()"
  },
  "addEventListener": {
    "prefix": "doc-addListener",
    "body": "document.addEventListener(\"${1:event}\", ${2:ev} => {\n\t${0}\n})"
  },
  "removeEventListener": {
    "prefix": "doc-removeListener",
    "body": "document.removeEventListener(\"${1:event}\", ${22:listener})"
  },
  "getElementById": {
    "prefix": "doc-getClass",
    "body": "document.getElementById(\"${1:id}\")"
  },
  "querySelector": {
    "prefix": "doc-querySelector",
    "body": "document.querySelector(\"${1:selector}\")"
  },
  "createElement": {
    "prefix": "create-element",
    "body": "${1:document}.createElement(${2:elem})"
  },
  "classList.add": {
    "prefix": "class-add",
    "body": "${1:el}.classList.add(\"${2:class}\")"
  },
  "classList.remove": {
    "prefix": "class-remove",
    "body": "${1:el}.classList.remove(\"${2:class}\")"
  },
  "classList.toggle": {
    "prefix": "class-toggle",
    "body": "${1:el}.classList.toggle(\"${2:class}\")"
  },
  "getAttribute": {
    "prefix": "attribute-get",
    "body": "${1:el}.getAttribute(\"${2:attr}\")"
  },
  "removeAttribute": {
    "prefix": "attribute-tremove",
    "body": "${1:el}.removeAttribute(\"${2:attr}\")"
  },
  "setAttribute": {
    "prefix": "attribute-set",
    "body": "${1:el}.setAttribute(\"${2:attr}\", ${3:value})"
  },
  "appendChild": {
    "prefix": "child-append",
    "body": "${1:el}.appendChild(${2:elem})"
  },
  "removeChild": {
    "prefix": "child-remove",
    "body": "${1:el}.removeChild(${2:elem})"
  },
  "this": {
    "prefix": "t",
    "body": "this."
  },
  "throw new Error": {
    "prefix": "throw",
    "body": "throw new ${0:error}"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
      "\tconst ${3:element} = ${2:array}[${1:index}];",
      "\t$0",
      "}"
    ],
    "description": "For Loop"
  },
  "For-Each Loop": {
    "prefix": "foreach-array",
    "body": ["${1:array}.forEach(${2:element} => {", "\t$0", "});"],
    "description": "For-Each Loop"
  },
  "For-In Loop": {
    "prefix": "forin",
    "body": [
      "for (let ${1:key} in ${2:object}) {",
      "\tif (${2:object}.hasOwnProperty(${1:key})) {",
      "\t\tconst ${3:element} = ${2:object}[${1:key}];",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "For-In Loop"
  },
  "For Loop reverse number pattern": {
    "prefix": "for-reverse-number-pattern",
    "body": [
      "for (let i = 5; i >= 0; i--) {",
      "\tlet row = \"\"",
      "\tfor (let j = 0; j < i; j++) {",
      "\t\trow += i + \" \"",
      "\t}",
      "\tconsole.log(row)",
      "}"
    ],
    "description": "For Loop reverse number parttern"
  },
  "For Loop number pattern": {
    "prefix": "for-number-pattern",
    "body": [
      "for (let i = 0; i <= 5; i++) {",
      "\tlet row = \"\"",
      "\tfor (let j = 0; j < i; j++) {",
      "\t\trow += i + \" \"",
      "\t}",
      "\tconsole.log(row)",
      "}"
    ],
    "description": "For Loop number pattern"
  },
  "For-Of Loop": {
    "prefix": "forof",
    "body": ["for (const ${1:iterator} of ${2:object}) {", "\t$0", "}"],
    "description": "For-Of Loop"
  }
}
